{
  "operations": {},
  "definitions": {
    "CommonType": {
      "description": "Represents a base type. Every type extends from this common type and shares the defined properties",
      "type": "object",
      "properties": {
        "description": {
          "description": "General description of this type, should not contain any new lines.",
          "type": "string"
        },
        "type": {
          "description": "Type of the property",
          "type": "string"
        },
        "nullable": {
          "description": "Indicates whether it is possible to use a null value",
          "type": "boolean"
        },
        "deprecated": {
          "description": "Indicates whether this type is deprecated",
          "type": "boolean"
        },
        "readonly": {
          "description": "Indicates whether this type is readonly",
          "type": "boolean"
        }
      }
    },
    "StructType": {
      "description": "Represents a struct type. A struct type contains a fix set of defined properties",
      "type": "object",
      "$extends": "CommonType",
      "properties": {
        "$final": {
          "description": "Indicates that a struct is final, this means it is not possible to extend this struct",
          "type": "boolean"
        },
        "$extends": {
          "description": "Extends an existing type with the referenced type",
          "type": "string"
        },
        "type": {
          "description": "",
          "type": "string"
        },
        "properties": {
          "description": "",
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "MapType"
              },
              {
                "$ref": "ArrayType"
              },
              {
                "$ref": "BooleanType"
              },
              {
                "$ref": "NumberType"
              },
              {
                "$ref": "StringType"
              },
              {
                "$ref": "AnyType"
              },
              {
                "$ref": "IntersectionType"
              },
              {
                "$ref": "UnionType"
              },
              {
                "$ref": "ReferenceType"
              },
              {
                "$ref": "GenericType"
              }
            ]
          }
        },
        "required": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MapType": {
      "description": "Represents a map type. A map type contains variable key value entries of a specific type",
      "type": "object",
      "$extends": "CommonType",
      "properties": {
        "type": {
          "description": "",
          "type": "string"
        },
        "additionalProperties": {
          "description": "",
          "oneOf": [
            {
              "$ref": "BooleanType"
            },
            {
              "$ref": "NumberType"
            },
            {
              "$ref": "StringType"
            },
            {
              "$ref": "ArrayType"
            },
            {
              "$ref": "UnionType"
            },
            {
              "$ref": "IntersectionType"
            },
            {
              "$ref": "ReferenceType"
            },
            {
              "$ref": "GenericType"
            },
            {
              "$ref": "AnyType"
            }
          ]
        },
        "maxProperties": {
          "description": "Positive integer value",
          "type": "integer"
        },
        "minProperties": {
          "description": "Positive integer value",
          "type": "integer"
        }
      }
    },
    "ArrayType": {
      "description": "Represents an array type. An array type contains an ordered list of a specific type",
      "type": "object",
      "$extends": "CommonType",
      "properties": {
        "type": {
          "description": "",
          "type": "string"
        },
        "items": {
          "description": "",
          "oneOf": [
            {
              "$ref": "BooleanType"
            },
            {
              "$ref": "NumberType"
            },
            {
              "$ref": "StringType"
            },
            {
              "$ref": "ReferenceType"
            },
            {
              "$ref": "GenericType"
            },
            {
              "$ref": "AnyType"
            }
          ]
        },
        "maxItems": {
          "description": "Positive integer value",
          "type": "integer"
        },
        "minItems": {
          "description": "Positive integer value",
          "type": "integer"
        }
      }
    },
    "ScalarType": {
      "description": "Represents a scalar type",
      "type": "object",
      "$extends": "CommonType",
      "properties": {
        "format": {
          "description": "Describes the specific format of this type i.e. date-time or int64",
          "type": "string"
        },
        "enum": {
          "description": "",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          }
        },
        "default": {
          "description": "",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            },
            {
              "type": "boolean"
            }
          ]
        }
      }
    },
    "BooleanType": {
      "description": "Represents a boolean type",
      "type": "object",
      "$extends": "ScalarType",
      "properties": {
        "type": {
          "description": "",
          "type": "string"
        }
      }
    },
    "NumberType": {
      "description": "Represents a number type (contains also integer)",
      "type": "object",
      "$extends": "ScalarType",
      "properties": {
        "type": {
          "description": "",
          "type": "string"
        },
        "multipleOf": {
          "description": "",
          "type": "number",
          "minimum": 0
        },
        "maximum": {
          "description": "",
          "type": "number"
        },
        "exclusiveMaximum": {
          "description": "",
          "type": "boolean"
        },
        "minimum": {
          "description": "",
          "type": "number"
        },
        "exclusiveMinimum": {
          "description": "",
          "type": "boolean"
        }
      }
    },
    "StringType": {
      "description": "Represents a string type",
      "type": "object",
      "$extends": "ScalarType",
      "properties": {
        "type": {
          "description": "",
          "type": "string"
        },
        "maxLength": {
          "description": "Positive integer value",
          "type": "integer",
          "minimum": 0
        },
        "minLength": {
          "description": "Positive integer value",
          "type": "integer",
          "minimum": 0
        },
        "pattern": {
          "description": "",
          "type": "string",
          "format": ""
        }
      }
    },
    "AnyType": {
      "description": "Represents an any type",
      "type": "object",
      "$extends": "CommonType",
      "properties": {
        "type": {
          "description": "",
          "type": "string"
        }
      }
    },
    "IntersectionType": {
      "description": "Represents an intersection type",
      "type": "object",
      "properties": {
        "description": {
          "description": "",
          "type": "string"
        },
        "allOf": {
          "description": "Contains an array of references. The reference must only point to a struct type",
          "type": "array",
          "items": {
            "$ref": "ReferenceType"
          }
        }
      }
    },
    "UnionType": {
      "description": "Represents an union type. An union type can contain one of the provided types",
      "type": "object",
      "properties": {
        "description": {
          "description": "",
          "type": "string"
        },
        "discriminator": {
          "description": "",
          "$ref": "Discriminator"
        },
        "oneOf": {
          "description": "Contains an array of references. The reference must only point to a struct type",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "NumberType"
              },
              {
                "$ref": "StringType"
              },
              {
                "$ref": "BooleanType"
              },
              {
                "$ref": "ReferenceType"
              }
            ]
          }
        }
      }
    },
    "Discriminator": {
      "description": "Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description",
      "type": "object",
      "properties": {
        "propertyName": {
          "description": "The name of the property in the payload that will hold the discriminator value",
          "type": "string"
        },
        "mapping": {
          "description": "An object to hold mappings between payload values and schema names or references",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ReferenceType": {
      "description": "Represents a reference type. A reference type points to a specific type at the definitions map",
      "type": "object",
      "properties": {
        "$ref": {
          "description": "Reference to a type under the definitions map",
          "type": "string"
        },
        "$template": {
          "description": "Optional concrete type definitions which replace generic template types",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "GenericType": {
      "description": "Represents a generic type. A generic type can be used i.e. at a map or array which then can be replaced on reference via the $template keyword",
      "type": "object",
      "properties": {
        "$generic": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TypeSchema": {
      "description": "The root TypeSchema",
      "type": "object",
      "properties": {
        "$import": {
          "description": "Contains external definitions which are imported. The imported schemas can be used via the namespace i.e. 'my_namespace:my_type'",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "definitions": {
          "description": "",
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "StructType"
              },
              {
                "$ref": "MapType"
              },
              {
                "$ref": "ReferenceType"
              }
            ]
          }
        },
        "$ref": {
          "description": "Reference to a root schema under the definitions key",
          "type": "string"
        }
      }
    }
  },
  "$ref": "TypeSchema"
}