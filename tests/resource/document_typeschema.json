{
  "imports": [],
  "operations": [],
  "types": [
    {
      "name": "CommonType",
      "type": "object",
      "description": "Represents a base type. Every type extends from this common type and shares the defined properties",
      "properties": [
        {
          "name": "description",
          "description": "General description of this type, should not contain any new lines.",
          "type": "string"
        },
        {
          "name": "type",
          "description": "Type of the property",
          "type": "string"
        },
        {
          "name": "nullable",
          "description": "Indicates whether it is possible to use a null value",
          "type": "boolean"
        },
        {
          "name": "deprecated",
          "description": "Indicates whether this type is deprecated",
          "type": "boolean"
        },
        {
          "name": "readonly",
          "description": "Indicates whether this type is readonly",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "StructType",
      "type": "object",
      "description": "Represents a struct type. A struct type contains a fix set of defined properties",
      "parent": "CommonType",
      "properties": [
        {
          "name": "$final",
          "description": "Indicates that a struct is final, this means it is not possible to extend this struct",
          "type": "boolean"
        },
        {
          "name": "$extends",
          "description": "Extends an existing type with the referenced type",
          "type": "string"
        },
        {
          "name": "type",
          "description": "",
          "type": "string"
        },
        {
          "name": "properties",
          "description": "",
          "type": "map",
          "refs": [
            "MapType",
            "ArrayType",
            "BooleanType",
            "NumberType",
            "StringType",
            "AnyType",
            "IntersectionType",
            "UnionType",
            "ReferenceType",
            "GenericType"
          ]
        },
        {
          "name": "required",
          "description": "",
          "type": "array",
          "refs": [
            "string"
          ]
        }
      ]
    },
    {
      "name": "MapType",
      "type": "object",
      "description": "Represents a map type. A map type contains variable key value entries of a specific type",
      "parent": "CommonType",
      "properties": [
        {
          "name": "type",
          "description": "",
          "type": "string"
        },
        {
          "name": "additionalProperties",
          "description": "",
          "type": "union",
          "refs": [
            "BooleanType",
            "NumberType",
            "StringType",
            "ArrayType",
            "UnionType",
            "IntersectionType",
            "ReferenceType",
            "GenericType",
            "AnyType"
          ]
        },
        {
          "name": "maxProperties",
          "description": "Positive integer value",
          "type": "integer"
        },
        {
          "name": "minProperties",
          "description": "Positive integer value",
          "type": "integer"
        }
      ]
    },
    {
      "name": "ArrayType",
      "type": "object",
      "description": "Represents an array type. An array type contains an ordered list of a specific type",
      "parent": "CommonType",
      "properties": [
        {
          "name": "type",
          "description": "",
          "type": "string"
        },
        {
          "name": "items",
          "description": "",
          "type": "union",
          "refs": [
            "BooleanType",
            "NumberType",
            "StringType",
            "ReferenceType",
            "GenericType",
            "AnyType"
          ]
        },
        {
          "name": "maxItems",
          "description": "Positive integer value",
          "type": "integer"
        },
        {
          "name": "minItems",
          "description": "Positive integer value",
          "type": "integer"
        }
      ]
    },
    {
      "name": "ScalarType",
      "type": "object",
      "description": "Represents a scalar type",
      "parent": "CommonType",
      "properties": [
        {
          "name": "format",
          "description": "Describes the specific format of this type i.e. date-time or int64",
          "type": "string"
        },
        {
          "name": "enum",
          "description": "",
          "type": "array",
          "refs": [
            "string",
            "number"
          ]
        },
        {
          "name": "default",
          "description": "",
          "type": "union",
          "refs": [
            "string",
            "number",
            "boolean"
          ]
        }
      ]
    },
    {
      "name": "BooleanType",
      "type": "object",
      "description": "Represents a boolean type",
      "parent": "ScalarType",
      "properties": [
        {
          "name": "type",
          "description": "",
          "type": "string"
        }
      ]
    },
    {
      "name": "NumberType",
      "type": "object",
      "description": "Represents a number type (contains also integer)",
      "parent": "ScalarType",
      "properties": [
        {
          "name": "type",
          "description": "",
          "type": "string"
        },
        {
          "name": "multipleOf",
          "description": "",
          "type": "number",
          "minimum": 0
        },
        {
          "name": "maximum",
          "description": "",
          "type": "number"
        },
        {
          "name": "exclusiveMaximum",
          "description": "",
          "type": "boolean"
        },
        {
          "name": "minimum",
          "description": "",
          "type": "number"
        },
        {
          "name": "exclusiveMinimum",
          "description": "",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "StringType",
      "type": "object",
      "description": "Represents a string type",
      "parent": "ScalarType",
      "properties": [
        {
          "name": "type",
          "description": "",
          "type": "string"
        },
        {
          "name": "maxLength",
          "description": "Positive integer value",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "minLength",
          "description": "Positive integer value",
          "type": "integer",
          "minimum": 0
        },
        {
          "name": "pattern",
          "description": "",
          "type": "string",
          "format": ""
        }
      ]
    },
    {
      "name": "AnyType",
      "type": "object",
      "description": "Represents an any type",
      "parent": "CommonType",
      "properties": [
        {
          "name": "type",
          "description": "",
          "type": "string"
        }
      ]
    },
    {
      "name": "IntersectionType",
      "type": "object",
      "description": "Represents an intersection type",
      "properties": [
        {
          "name": "description",
          "description": "",
          "type": "string"
        },
        {
          "name": "allOf",
          "description": "Contains an array of references. The reference must only point to a struct type",
          "type": "array",
          "refs": [
            "ReferenceType"
          ]
        }
      ]
    },
    {
      "name": "UnionType",
      "type": "object",
      "description": "Represents an union type. An union type can contain one of the provided types",
      "properties": [
        {
          "name": "description",
          "description": "",
          "type": "string"
        },
        {
          "name": "discriminator",
          "description": "",
          "type": "object",
          "refs": [
            "Discriminator"
          ]
        },
        {
          "name": "oneOf",
          "description": "Contains an array of references. The reference must only point to a struct type",
          "type": "array",
          "refs": [
            "NumberType",
            "StringType",
            "BooleanType",
            "ReferenceType"
          ]
        }
      ]
    },
    {
      "name": "Discriminator",
      "type": "object",
      "description": "Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description",
      "properties": [
        {
          "name": "propertyName",
          "description": "The name of the property in the payload that will hold the discriminator value",
          "type": "string"
        },
        {
          "name": "mapping",
          "description": "An object to hold mappings between payload values and schema names or references",
          "type": "map",
          "refs": [
            "string"
          ]
        }
      ]
    },
    {
      "name": "ReferenceType",
      "type": "object",
      "description": "Represents a reference type. A reference type points to a specific type at the definitions map",
      "properties": [
        {
          "name": "$ref",
          "description": "Reference to a type under the definitions map",
          "type": "string"
        },
        {
          "name": "$template",
          "description": "Optional concrete type definitions which replace generic template types",
          "type": "map",
          "refs": [
            "string"
          ]
        }
      ]
    },
    {
      "name": "GenericType",
      "type": "object",
      "description": "Represents a generic type. A generic type can be used i.e. at a map or array which then can be replaced on reference via the $template keyword",
      "properties": [
        {
          "name": "$generic",
          "description": "",
          "type": "string"
        }
      ]
    },
    {
      "name": "TypeSchema",
      "type": "object",
      "description": "The root TypeSchema",
      "properties": [
        {
          "name": "$import",
          "description": "Contains external definitions which are imported. The imported schemas can be used via the namespace i.e. 'my_namespace:my_type'",
          "type": "map",
          "refs": [
            "string"
          ]
        },
        {
          "name": "definitions",
          "description": "",
          "type": "map",
          "refs": [
            "StructType",
            "MapType",
            "ReferenceType"
          ]
        },
        {
          "name": "$ref",
          "description": "Reference to a root schema under the definitions key",
          "type": "string"
        }
      ]
    }
  ],
  "root": 14
}